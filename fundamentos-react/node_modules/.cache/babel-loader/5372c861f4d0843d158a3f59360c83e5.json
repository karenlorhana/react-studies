{"ast":null,"code":"import { toNestError as e } from \"@hookform/resolvers\";\nimport { appendErrors as t } from \"react-hook-form\";\n\nvar r = function (r, o, n) {\n  return void 0 === o && (o = {}), void 0 === n && (n = {}), function (s, a, c) {\n    try {\n      return Promise.resolve(function (e, t) {\n        try {\n          var c = (o.context && \"development\" === process.env.NODE_ENV && console.warn(\"You should not used the yup options context. Please, use the 'useForm' context object instead\"), Promise.resolve(r[\"sync\" === n.mode ? \"validateSync\" : \"validate\"](s, Object.assign({\n            abortEarly: !1\n          }, o, {\n            context: a\n          }))).then(function (e) {\n            return {\n              values: e,\n              errors: {}\n            };\n          }));\n        } catch (e) {\n          return t(e);\n        }\n\n        return c && c.then ? c.then(void 0, t) : c;\n      }(0, function (r) {\n        return {\n          values: {},\n          errors: e((o = r, n = \"all\" === c.criteriaMode, o.inner.reduce(function (e, r) {\n            if (e[r.path] || (e[r.path] = {\n              message: r.message,\n              type: r.type\n            }), n) {\n              var o = e[r.path].types,\n                  s = o && o[r.type];\n              e[r.path] = t(r.path, n, e, r.type, s ? [].concat(s, r.message) : r.message);\n            }\n\n            return e;\n          }, {})), c.fields)\n        };\n        var o, n;\n      }));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n};\n\nexport { r as yupResolver };","map":{"version":3,"sources":["../src/yup.ts"],"names":["error","validateAllFieldCriteria","inner","reduce","previous","path","message","type","types","messages","appendErrors","concat","yupResolver","schema","schemaOptions","resolverOptions","values","context","options","process","env","NODE_ENV","console","warn","result","mode","Object","assign","abortEarly","errors","e","toNestError","criteriaMode","fields"],"mappings":"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","sourcesContent":["import Yup from 'yup';\nimport { toNestError } from '@hookform/resolvers';\nimport { appendErrors, FieldError } from 'react-hook-form';\nimport { Resolver } from './types';\n\n/**\n * Why `path!` ? because it could be `undefined` in some case\n * https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string\n */\nconst parseErrorSchema = (\n  error: Yup.ValidationError,\n  validateAllFieldCriteria: boolean,\n) => {\n  return error.inner.reduce<Record<string, FieldError>>((previous, error) => {\n    if (!previous[error.path!]) {\n      previous[error.path!] = { message: error.message, type: error.type! };\n    }\n\n    if (validateAllFieldCriteria) {\n      const types = previous[error.path!].types;\n      const messages = types && types[error.type!];\n\n      previous[error.path!] = appendErrors(\n        error.path!,\n        validateAllFieldCriteria,\n        previous,\n        error.type!,\n        messages\n          ? ([] as string[]).concat(messages as string[], error.message)\n          : error.message,\n      ) as FieldError;\n    }\n\n    return previous;\n  }, {});\n};\n\nexport const yupResolver: Resolver =\n  (schema, schemaOptions = {}, resolverOptions = {}) =>\n  async (values, context, options) => {\n    try {\n      if (schemaOptions.context && process.env.NODE_ENV === 'development') {\n        // eslint-disable-next-line no-console\n        console.warn(\n          \"You should not used the yup options context. Please, use the 'useForm' context object instead\",\n        );\n      }\n\n      const result = await schema[\n        resolverOptions.mode === 'sync' ? 'validateSync' : 'validate'\n      ](\n        values,\n        Object.assign({ abortEarly: false }, schemaOptions, { context }),\n      );\n\n      return {\n        values: result,\n        errors: {},\n      };\n    } catch (e) {\n      return {\n        values: {},\n        errors: toNestError(\n          parseErrorSchema(e, options.criteriaMode === 'all'),\n          options.fields,\n        ),\n      };\n    }\n  };\n"]},"metadata":{},"sourceType":"module"}