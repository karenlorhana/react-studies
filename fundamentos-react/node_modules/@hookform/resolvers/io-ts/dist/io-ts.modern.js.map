{"version":3,"file":"io-ts.modern.js","sources":["../src/arrayToPath.ts","../src/errorsToRecord.ts","../src/io-ts.ts"],"sourcesContent":["import * as Either from 'fp-ts/Either';\nimport { pipe } from 'fp-ts/function';\n\nconst arrayToPath = (paths: Either.Either<string, number>[]): string =>\n  paths.reduce(\n    (previous, path, index) =>\n      pipe(\n        path,\n        Either.fold(\n          (key) => `${index > 0 ? '.' : ''}${key}`,\n          (key) => `[${key}]`,\n        ),\n        (path) => `${previous}${path}`,\n      ),\n    '',\n  );\n\nexport default arrayToPath;\n","import * as t from 'io-ts';\nimport {\n  IntersectionType,\n  TaggedUnionType,\n  UnionType,\n  ValidationError,\n} from 'io-ts';\nimport { absurd, flow, identity, not, pipe } from 'fp-ts/function';\nimport * as ReadonlyArray from 'fp-ts/ReadonlyArray';\nimport * as Option from 'fp-ts/Option';\nimport * as Either from 'fp-ts/Either';\nimport * as SemiGroup from 'fp-ts/Semigroup';\nimport arrayToPath from './arrayToPath';\nimport * as ReadonlyRecord from 'fp-ts/ReadonlyRecord';\nimport { ErrorObject, FieldErrorWithPath } from './types';\n\nconst formatErrorPath = (context: t.Context): string =>\n  pipe(\n    context,\n    ReadonlyArray.filterMapWithIndex((index, contextEntry) => {\n      const previousIndex = index - 1;\n\n      const shouldBeFiltered =\n        context[previousIndex] === undefined ||\n        context[previousIndex].type instanceof TaggedUnionType ||\n        context[previousIndex].type instanceof UnionType ||\n        context[previousIndex].type instanceof IntersectionType;\n\n      return shouldBeFiltered ? Option.none : Option.some(contextEntry);\n    }),\n    ReadonlyArray.map(({ key }) => key),\n    ReadonlyArray.map((key) =>\n      pipe(\n        key,\n        (k) => parseInt(k, 10),\n        Either.fromPredicate(not<number>(Number.isNaN), () => key),\n      ),\n    ),\n    ReadonlyArray.toArray,\n    arrayToPath,\n  );\n\nconst formatError = (e: t.ValidationError): FieldErrorWithPath => {\n  const path = formatErrorPath(e.context);\n\n  const message = pipe(\n    e.message,\n    Either.fromNullable(e.context),\n    Either.mapLeft(\n      flow(\n        ReadonlyArray.last,\n        Option.map(\n          (contextEntry) =>\n            `expected ${contextEntry.type.name} but got ${JSON.stringify(\n              contextEntry.actual,\n            )}`,\n        ),\n        Option.getOrElseW(() =>\n          absurd<string>('Error context is missing name' as never),\n        ),\n      ),\n    ),\n    Either.getOrElseW(identity),\n  );\n\n  const type = pipe(\n    e.context,\n    ReadonlyArray.last,\n    Option.map((contextEntry) => contextEntry.type.name),\n    Option.getOrElse(() => 'unknown'),\n  );\n\n  return { message, type, path };\n};\n\n// this is almost the same function like Semigroup.getObjectSemigroup but reversed\n// in order to get the first error\nconst getObjectSemigroup = <\n  A extends Record<string, unknown> = never,\n>(): SemiGroup.Semigroup<A> => ({\n  concat: (first, second) => Object.assign({}, second, first),\n});\n\nconst concatToSingleError = (\n  errors: ReadonlyArray<FieldErrorWithPath>,\n): ErrorObject =>\n  pipe(\n    errors,\n    ReadonlyArray.map((error) => ({\n      [error.path]: {\n        type: error.type,\n        message: error.message,\n      },\n    })),\n    (errors) => SemiGroup.fold(getObjectSemigroup<ErrorObject>())({}, errors),\n  );\n\nconst appendSeveralErrors: SemiGroup.Semigroup<FieldErrorWithPath> = {\n  concat: (a, b) => ({\n    ...b,\n    types: { ...a.types, [a.type]: a.message, [b.type]: b.message },\n  }),\n};\n\nconst concatToMultipleErrors = (\n  errors: ReadonlyArray<FieldErrorWithPath>,\n): ErrorObject =>\n  pipe(\n    ReadonlyRecord.fromFoldableMap(appendSeveralErrors, ReadonlyArray.Foldable)(\n      errors,\n      (error) => [error.path, error],\n    ),\n    ReadonlyRecord.map((errorWithPath) => {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const { path, ...error } = errorWithPath;\n\n      return error;\n    }),\n  );\n\nconst errorsToRecord =\n  (validateAllFieldCriteria: boolean) =>\n  (validationErrors: ReadonlyArray<ValidationError>): ErrorObject => {\n    const concat = validateAllFieldCriteria\n      ? concatToMultipleErrors\n      : concatToSingleError;\n\n    return pipe(validationErrors, ReadonlyArray.map(formatError), concat);\n  };\n\nexport default errorsToRecord;\n","import * as Either from 'fp-ts/lib/Either';\nimport { pipe } from 'fp-ts/function';\nimport { toNestError } from '@hookform/resolvers';\nimport errorsToRecord from './errorsToRecord';\nimport { Resolver } from './types';\n\nexport const ioTsResolver: Resolver = (codec) => (values, _context, options) =>\n  pipe(\n    values,\n    codec.decode,\n    Either.mapLeft(errorsToRecord(options.criteriaMode === 'all')),\n    Either.mapLeft((errors) => toNestError(errors, options.fields)),\n    Either.fold(\n      (errors) => ({\n        values: {},\n        errors,\n      }),\n      (values) => ({\n        values,\n        errors: {},\n      }),\n    ),\n  );\n"],"names":["arrayToPath","paths","reduce","previous","path","index","pipe","Either","key","formatError","e","context","ReadonlyArray","contextEntry","previousIndex","undefined","type","TaggedUnionType","UnionType","IntersectionType","Option","k","parseInt","not","Number","isNaN","message","flow","name","JSON","stringify","actual","absurd","identity","concatToSingleError","errors","error","[object Object]","SemiGroup","concat","first","second","Object","assign","appendSeveralErrors","a","b","types","concatToMultipleErrors","ReadonlyRecord","errorWithPath","ioTsResolver","codec","values","_context","options","decode","validateAllFieldCriteria","criteriaMode","validationErrors","toNestError","fields"],"mappings":"g2BAGA,MAAMA,EAAeC,GACnBA,EAAMC,OACJ,CAACC,EAAUC,EAAMC,IACfC,EACEF,EACAG,EACGC,MAAWH,EAAQ,EAAI,IAAM,KAAKG,IAClCA,OAAYA,MAEdJ,MAAYD,IAAWC,KAE5B,IC4BEK,EAAeC,IACnB,MAAMN,EA1BNE,EADuBK,EA2BMD,EAAEC,QAxB7BC,EAAiC,CAACP,EAAOQ,KACvC,MAAMC,EAAgBT,EAAQ,EAQ9B,YAL6BU,IAA3BJ,EAAQG,IACRH,EAAQG,GAAeE,gBAAgBC,GACvCN,EAAQG,GAAeE,gBAAgBE,GACvCP,EAAQG,GAAeE,gBAAgBG,EAEfC,EAAcA,EAAYP,KAEtDD,EAAkB,EAAGJ,IAAAA,KAAUA,GAC/BI,EAAmBJ,GACjBF,EACEE,EACCa,GAAMC,SAASD,EAAG,IACnBd,EAAqBgB,EAAYC,OAAOC,OAAQ,IAAMjB,KAG1DI,EACAZ,GAvBqBW,IAAAA,EAwDvB,MAAO,CAAEe,QA3BOpB,EACdI,EAAEgB,QACFnB,EAAoBG,EAAEC,SACtBJ,EACEoB,EACEf,EACAQ,EACGP,eACaA,EAAaG,KAAKY,gBAAgBC,KAAKC,UACjDjB,EAAakB,WAGnBX,EAAkB,IAChBY,EAAe,oCAIrBzB,EAAkB0B,IAUFjB,KAPLV,EACXI,EAAEC,QACFC,EACAQ,EAAYP,GAAiBA,EAAaG,KAAKY,MAC/CR,EAAiB,IAAM,YAGDhB,KAAAA,IAWpB8B,EACJC,GAEA7B,EACE6B,EACAvB,EAAmBwB,KACjBC,CAACD,EAAMhC,MAAO,CACZY,KAAMoB,EAAMpB,KACZU,QAASU,EAAMV,YAGlBS,GAAWG,GAddC,OAAQ,CAACC,EAAOC,IAAWC,OAAOC,OAAO,GAAIF,EAAQD,IAcvCF,CAAkD,GAAIH,IAGhES,EAA+D,CACnEL,OAAQ,CAACM,EAAGC,SACPA,GACHC,WAAYF,EAAEE,OAAOV,CAACQ,EAAE7B,MAAO6B,EAAEnB,QAASW,CAACS,EAAE9B,MAAO8B,EAAEpB,aAIpDsB,EACJb,GAEA7B,EACE2C,EAA+BL,EAAqBhC,EAApDqC,CACEd,EACCC,GAAU,CAACA,EAAMhC,KAAMgC,IAE1Ba,EAAoBC,sIAESA,cC5GpBC,EAA0BC,GAAU,CAACC,EAAQC,EAAUC,KAClEjD,OAAAA,EACE+C,EACAD,EAAMI,OACNjD,GD+GDkD,EC/GwD,QAAzBF,EAAQG,aDgHvCC,IACC,MAAMpB,EAASkB,EACXT,EACAd,EAEJ,OAAO5B,EAAKqD,EAAkB/C,EAAkBH,GAAc8B,MCpH9DhC,EAAgB4B,GAAWyB,EAAYzB,EAAQoB,EAAQM,SACvDtD,EACG4B,KACCkB,OAAQ,GACRlB,OAAAA,IAEDkB,KACCA,OAAAA,EACAlB,OAAQ,ODsGbsB,IAAAA"}