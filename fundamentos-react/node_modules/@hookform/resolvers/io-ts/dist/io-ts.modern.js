import{mapLeft as t,fold as e}from"fp-ts/lib/Either";import{pipe as r,not as o,flow as s,absurd as n,identity as a}from"fp-ts/function";import{toNestError as p}from"@hookform/resolvers";import{TaggedUnionType as i,UnionType as f,IntersectionType as m}from"io-ts";import{map as c,filterMapWithIndex as u,toArray as y,last as l,Foldable as g}from"fp-ts/ReadonlyArray";import{none as d,some as h,map as v,getOrElseW as O,getOrElse as b}from"fp-ts/Option";import{fold as x,fromPredicate as $,fromNullable as j,mapLeft as k,getOrElseW as E}from"fp-ts/Either";import{fold as N}from"fp-ts/Semigroup";import{fromFoldableMap as R,map as w}from"fp-ts/ReadonlyRecord";function S(){return(S=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var r=arguments[e];for(var o in r)Object.prototype.hasOwnProperty.call(r,o)&&(t[o]=r[o])}return t}).apply(this,arguments)}const A=t=>t.reduce((t,e,o)=>r(e,x(t=>`${o>0?".":""}${t}`,t=>`[${t}]`),e=>`${t}${e}`),""),I=t=>{const e=r(p=t.context,u((t,e)=>{const r=t-1;return void 0===p[r]||p[r].type instanceof i||p[r].type instanceof f||p[r].type instanceof m?d:h(e)}),c(({key:t})=>t),c(t=>r(t,t=>parseInt(t,10),$(o(Number.isNaN),()=>t))),y,A);var p;return{message:r(t.message,j(t.context),k(s(l,v(t=>`expected ${t.type.name} but got ${JSON.stringify(t.actual)}`),O(()=>n("Error context is missing name")))),E(a)),type:r(t.context,l,v(t=>t.type.name),b(()=>"unknown")),path:e}},J=t=>r(t,c(t=>({[t.path]:{type:t.type,message:t.message}})),t=>N({concat:(t,e)=>Object.assign({},e,t)})({},t)),L={concat:(t,e)=>S({},e,{types:S({},t.types,{[t.type]:t.message,[e.type]:e.message})})},M=t=>r(R(L,g)(t,t=>[t.path,t]),w(t=>function(t,e){if(null==t)return{};var r,o,s={},n=Object.keys(t);for(o=0;o<n.length;o++)e.indexOf(r=n[o])>=0||(s[r]=t[r]);return s}(t,["path"]))),P=o=>(s,n,a)=>{return r(s,o.decode,t((i="all"===a.criteriaMode,t=>{const e=i?M:J;return r(t,c(I),e)})),t(t=>p(t,a.fields)),e(t=>({values:{},errors:t}),t=>({values:t,errors:{}})));var i};export{P as ioTsResolver};
//# sourceMappingURL=io-ts.modern.js.map
