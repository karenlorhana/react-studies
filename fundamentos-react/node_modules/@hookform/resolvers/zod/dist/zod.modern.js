import{appendErrors as r}from"react-hook-form";import{toNestError as e}from"@hookform/resolvers";const s=(e,s)=>{const o={};for(;e.length;){const n=e[0],{code:t,message:a,path:c}=n,i=c.join(".");if(!o[i])if("unionErrors"in n){const r=n.unionErrors[0].errors[0];o[i]={message:r.message,type:r.code}}else o[i]={message:a,type:t};if("unionErrors"in n&&n.unionErrors.forEach(r=>r.errors.forEach(r=>e.push(r))),s){const e=o[i].types,a=e&&e[n.code];o[i]=r(i,s,o,t,a?[].concat(a,n.message):n.message)}e.shift()}return o},o=(r,o,n={})=>async(t,a,c)=>{try{return{errors:{},values:await r["sync"===n.mode?"parse":"parseAsync"](t,o)}}catch(r){return{values:{},errors:r.isEmpty?{}:e(s(r.errors,"all"===c.criteriaMode),c.fields)}}};export{o as zodResolver};
//# sourceMappingURL=zod.modern.js.map
