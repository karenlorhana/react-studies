{"version":3,"file":"yup.modern.js","sources":["../src/yup.ts"],"sourcesContent":["import Yup from 'yup';\nimport { toNestError } from '@hookform/resolvers';\nimport { appendErrors, FieldError } from 'react-hook-form';\nimport { Resolver } from './types';\n\n/**\n * Why `path!` ? because it could be `undefined` in some case\n * https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string\n */\nconst parseErrorSchema = (\n  error: Yup.ValidationError,\n  validateAllFieldCriteria: boolean,\n) => {\n  return error.inner.reduce<Record<string, FieldError>>((previous, error) => {\n    if (!previous[error.path!]) {\n      previous[error.path!] = { message: error.message, type: error.type! };\n    }\n\n    if (validateAllFieldCriteria) {\n      const types = previous[error.path!].types;\n      const messages = types && types[error.type!];\n\n      previous[error.path!] = appendErrors(\n        error.path!,\n        validateAllFieldCriteria,\n        previous,\n        error.type!,\n        messages\n          ? ([] as string[]).concat(messages as string[], error.message)\n          : error.message,\n      ) as FieldError;\n    }\n\n    return previous;\n  }, {});\n};\n\nexport const yupResolver: Resolver =\n  (schema, schemaOptions = {}, resolverOptions = {}) =>\n  async (values, context, options) => {\n    try {\n      if (schemaOptions.context && process.env.NODE_ENV === 'development') {\n        // eslint-disable-next-line no-console\n        console.warn(\n          \"You should not used the yup options context. Please, use the 'useForm' context object instead\",\n        );\n      }\n\n      const result = await schema[\n        resolverOptions.mode === 'sync' ? 'validateSync' : 'validate'\n      ](\n        values,\n        Object.assign({ abortEarly: false }, schemaOptions, { context }),\n      );\n\n      return {\n        values: result,\n        errors: {},\n      };\n    } catch (e) {\n      return {\n        values: {},\n        errors: toNestError(\n          parseErrorSchema(e, options.criteriaMode === 'all'),\n          options.fields,\n        ),\n      };\n    }\n  };\n"],"names":["yupResolver","schema","schemaOptions","resolverOptions","async","values","context","options","process","env","NODE_ENV","console","warn","mode","Object","assign","abortEarly","errors","e","toNestError","error","validateAllFieldCriteria","criteriaMode","inner","reduce","previous","path","message","type","types","messages","appendErrors","concat","fields"],"mappings":"iGASA,MA4BaA,EACX,CAACC,EAAQC,EAAgB,GAAIC,EAAkB,KAC/CC,MAAOC,EAAQC,EAASC,KACtB,IAeE,OAdIL,EAAcI,SAAoC,gBAAzBE,QAAQC,IAAIC,UAEvCC,QAAQC,KACN,iGAWG,CACLP,aARmBJ,EACM,SAAzBE,EAAgBU,KAAkB,eAAiB,YAEnDR,EACAS,OAAOC,OAAO,CAAEC,YAAY,GAASd,EAAe,CAAEI,QAAAA,KAKtDW,OAAQ,IAEV,MAAOC,GACP,MAAO,CACLb,OAAQ,GACRY,OAAQE,GApDdC,EAqDyBF,EApDzBG,EAoDqD,QAAzBd,EAAQe,aAlD7BF,EAAMG,MAAMC,OAAmC,CAACC,EAAUL,KAK/D,GAJKK,EAASL,EAAMM,QAClBD,EAASL,EAAMM,MAAS,CAAEC,QAASP,EAAMO,QAASC,KAAMR,EAAMQ,OAG5DP,EAA0B,CAC5B,MAAMQ,EAAQJ,EAASL,EAAMM,MAAOG,MAC9BC,EAAWD,GAASA,EAAMT,EAAMQ,MAEtCH,EAASL,EAAMM,MAASK,EACtBX,EAAMM,KACNL,EACAI,EACAL,EAAMQ,KACNE,EACK,GAAgBE,OAAOF,EAAsBV,EAAMO,SACpDP,EAAMO,SAId,OAAOF,GACN,KA8BKlB,EAAQ0B,SAvDO,IACvBb,EACAC"}